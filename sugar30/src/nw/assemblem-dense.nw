
\section{Introduction}

The dense matrix assembly functions handle the assembly and
disassembly of global dense matrices and vectors, stored
in column-major order.  The matrix assembler objects export
the generic matrix assembly interface defined in [[assemblem.nw]].


\section{Interface}

<<assemblem-dense.h>>=
#ifndef ASSEMBLEM_DENSE_H
#define ASSEMBLEM_DENSE_H

#include "assemblem.h"

<<exported functions>>

#endif /* ASSEMBLEM_DENSE_H */
@ 

<<exported functions>>=
assemble_matrix_t* assembler_dense_vector   (double* data, int n, int ldA);
assemble_matrix_t* assembler_dense_getvector(double* data, int n, int ldA);
assemble_matrix_t* assembler_dense_matrix   (double* data, int n, int ldA);
@ 

The [[assembler_dense_vector]] routine creates a new assembler for
dense vectors, and the [[assembler_dense_matrix]] routine creates
an assembler for dense, column-major matrices.
The [[assembler_dense_getvector]] routine creates a new vector disassembler
object (one that extracts the local contribution from the global object).

The [[data]] argument specifies the global data object.  The [[data]]
object should have space for either [[n]] entries for a vector,
or [[n*ldA]] entries for a matrix ([[n*n]] of them are actually filled
with useful data).

<<exported functions>>=
assemble_matrix_t* assembler_bc(double* displacements, char* has_bc, int n);
@ 

The [[assembler_bc]] routine creates a specialized assembler for
tracking displacement boundary conditions.  The [[displacements]]
argument is a buffer into which displacement values are placed.
The [[has_bc]] argument is a buffer of flags -- flags which have
associated displacment boundary conditions are true, others are false.
Both buffers should be zero-filled when the assembler constructor
is called.


\section{Implementation}

<<assemblem-dense.c>>=
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "modelmgr.h"
#include "assemblem-dense.h"

<<types>>
<<static functions>>
<<functions>>
@ 


\subsection{Dense matrices}

<<types>>=
struct assemble_dense_t {
    double* data;
    int     n;
    int     ldA;
};

@ 

The [[assemble_dense_t]] structure contains the information for both matrix
and vector assembly.  The [[data]] field contains the matrix entries,
stored in column-major order with leading dimension [[ldA]].  There are
[[n]] variables.

The [[dense_vector_put]], [[dense_vector_get]], and [[dense_matrix_put]]
routines are the [[assemble]] methods for the vector assembler/disassembler
and matrix assembler types.  All of the methods have the same general
pattern: we loop through the index set, throwing away any indices out of
bounds, and move in-bounds contributions between the local buffer and the 
global structure.

<<static functions>>=
static void dense_vector_put(void* pself, int* vars, int n, double* local)
{
    struct assemble_dense_t* self = pself;
    int i;

    for (i = 0; i < n; ++i) {
        int i_var = vars[i];
	if (i_var < self->n) {
	    self->data[i_var] += local[i];
	}
    }
}

@ 

<<static functions>>=
static void dense_vector_get(void* pself, int* vars, int n,
				     double* local)
{
    struct assemble_dense_t* self = pself;
    int i;

    for (i = 0; i < n; ++i) {
        int i_var = vars[i];
	if (i_var < self->n) {
	    local[i] = self->data[i_var];
	}
    }
}

@ 

<<static functions>>=
static void dense_matrix_put(void* pself, int* vars, int n, double* local)
{
    struct assemble_dense_t* self = pself;
    int i, j;

    for (j = 0; j < n; ++j) {
	for (i = 0; i < n; ++i) {
	    int i_var = vars[i];
	    int j_var = vars[j];
	    if (i_var < self->n && j_var < self->n) {
	        self->data[j_var*self->ldA + i_var] += local[j*n+i];
	    }
	}
    }
}

@ 

The only difference in the dense vector assembler/disassembler and
dense matrix assembler types is the [[assemble]] method.  We put
the common aspects of initialization in a local routine.

<<static functions>>=
static assemble_matrix_t* dense_create(double* data, int n, int ldA)
{
    assemble_matrix_t* assembler  = malloc(sizeof(*assembler));
    struct assemble_dense_t* self = malloc(sizeof(*self));
    assembler->data   = self;
    self->n           = n;
    self->ldA         = ldA;
    self->data        = data;
    assembler->destroy  = free; 
    return assembler;
}

@ 

<<functions>>=
assemble_matrix_t* assembler_dense_vector(double* data, int n, int ldA)
{
    assemble_matrix_t* assembler = dense_create(data, n, ldA);
    assembler->assemble = dense_vector_put;
    return assembler;
}

@ 

<<functions>>=
assemble_matrix_t* assembler_dense_getvector(double* data, int n, int ldA)
{
    assemble_matrix_t* assembler = dense_create(data, n, ldA);
    assembler->assemble = dense_vector_get;
    return assembler;
}

@ 

<<functions>>=
assemble_matrix_t* assembler_dense_matrix(double* data, int n, int ldA)
{
    assemble_matrix_t* assembler = dense_create(data, n, ldA);
    assembler->assemble = dense_matrix_put;
    return assembler;
}

@ 



\subsection{Boundary condition assembly}

<<types>>=
struct assemble_bc_t {
    double* data;
    char*   has_bc;
    int     n;
};

@ 

<<static functions>>=
static void bc_put(void* pself, int* vars, int n, double* local)
{
    struct assemble_bc_t* self = pself;
    int i;

    for (i = 0; i < n; ++i) {
        if (vars[i] < self->n) {
	    self->has_bc[vars[i]] = 1;
	    self->data  [vars[i]] = local[i];
	}
    }
}

@ 

<<functions>>=
assemble_matrix_t* assembler_bc(double* displacements, char* has_bc, int n)
{
    assemble_matrix_t* assembler = malloc(sizeof(*assembler));
    struct assemble_bc_t* self = malloc(sizeof(*self));
    assembler->data = self;
    self->data          = displacements;
    self->has_bc        = has_bc;
    self->n             = n;
    assembler->assemble = bc_put;
    assembler->destroy  = free;
    return assembler;
}

@ 
