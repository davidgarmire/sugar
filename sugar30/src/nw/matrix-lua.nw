
\section{Introduction}

The [[matrix-lua]] module adds simple matrix support to Lua.
Supported functions are
\begin{itemize}
  \item [[matrix(m,n)]]: create a new zero matrix of size $m$ by $n$
  \item [[A(i,j)]]:      get $A_{ij}$
  \item [[A[k]]]:        get or set the $k$th element (column-major 1-based)
  \item [[C = A+B]]:     add two matrices
  \item [[C = A-B]]:     subtract two matrices
  \item [[C = -A]]:      take the unary negation of a matrix
  \item [[C = A*B]]:     multiply two matrices
  \item [[A.print()]]:   print matrix
  \item [[A.factor()]]:  factor matrix
  \item [[A.solve(x)]]:  compute $x := A^{-1}x$
  \item [[A.clone()]]:   create a copy of the matrix
  \item [[A.slice(i1,i2,j1,j2)]]:   create a slice of the matrix
  \item [[A.free()]]:    free matrix
\end{itemize}
Supported variables are
\begin{itemize}
  \item [[A.m]]:  return number of rows in matrix
  \item [[A.n]]:  return number of columns in matrix
\end{itemize}


\section{Interface}

<<matrix-lua.h>>=
#ifndef MATRIX_LUA_H
#define MATRIX_LUA_H 

#include <lua.h>

struct lua_matrix_struct {
    int owns_data;  /* True if this matrix owns storage  */
    int m, n, ld;   /* Array size and leading dimension  */
    double* data;   /* Array data                        */
    int* ipiv;      /* Pivot array for factored matrices */
};

typedef struct lua_matrix_struct* lua_matrix_t;

void         lua_matrix_register(lua_State* L);
void         lua_matrix_push(lua_State* L, lua_matrix_t A);
lua_matrix_t lua_matrix_get(lua_State* L, int index);

lua_matrix_t lua_matrix_create(int m, int n);
lua_matrix_t lua_matrix_slice(lua_matrix_t A, int i1, int i2, int j1, int j2);
void         lua_matrix_destroy(lua_matrix_t self);

#endif /* MATRIX_LUA_H */
@ 

The [[lua_matrix_register]] function registers the functions of
the module with the Lua interpreter.  The [[lua_matrix_push]]
and [[lua_matrix_get]] functions add and get matrices
on the Lua stack.

The [[lua_matrix_create]] and [[lua_matrix_destroy]] functions create
new matrices.  The [[lua_matrix_slice]] function creates a ``parasite''
matrix that uses the same storage as the original matrix but which
has different indexing.  In Matlab parlance, the slice function returns
[[A(i1:i2, j1:j2)]].


\section{Implementation}

<<matrix-lua.c>>=
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include "matrix-lua.h"

<<macros>>
<<static prototypes>>
<<static data>>
<<static functions>>
<<functions>>
@ 


\subsection{Matrix tag}

Lua provides \emph{tags} for user data, with semantics known only
to the host program.  The [[lua_matrix_tag]] is the tag for
the Lua matrix type.  Note that you \emph{could} get into trouble
with this if multiple interpreters are simultaneously active,
since the different interpreters may not end up allocating the same
tag value.

<<static data>>=
static int lua_matrix_tag;

@ 


\subsection{Accessor macros}

We use a couple convenience macros for getting the matrix entries.
The macros use one-based indexing for consistence with the Lua
index conventions.

<<macros>>=
#define Mij(M,i,j) (M->data[((j)-1)*M->ld + ((i)-1)])
#define Mrow0(M,k) ( ((k)-1) % (M->m) )
#define Mcol0(M,k) ( ((k)-1) / (M->m) )
#define Mk(M,k)    ( M->data[Mcol0(M,k) * M->ld + Mrow0(M,k)] )

@ 

\subsection{Matrix call getter}

We use Lua tag methods to handle the case when the ``call'' syntax
is applied to a matrix object.  If there is one numeric argument $i$,
we get the $(i,1)$ matrix entry; if there are two numeric arguments,
we get the $(i,j)$ entry.

<<register functions>>=
lua_pushcclosure(L, lua_matrix_call, 0);
lua_settagmethod(L, lua_matrix_tag, "function");
@ 

<<static functions>>=
static int lua_matrix_call(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,1);
    int n = lua_gettop(L);
    int i, j;

    if (n < 2 || n > 3)
        lua_error(L, "Wrong number of arguments");

    if (!lua_isnumber(L,2) || (n == 3 && !lua_isnumber(L,3)))
        lua_error(L, "Index must be a number");

    i = (int) lua_tonumber(L,2);
    j = (n == 3) ? (int) lua_tonumber(L,3) : 1;

    if (i <= 0 || i > A->m || j <= 0 || j > A->n)
        lua_error(L, "Index out of range");

    lua_settop(L,0);
    lua_pushnumber(L, Mij(A,i,j));
    return 1;
}

@ 


\subsection{Matrix table getter}

The indexed read operation does two different things.  If the index
is a number $k$, we try to return the $k$th element of the matrix
(as arranged in column-major order with one-based indexing).
If the index is a string, then we probably have a method call,
which is handled by the [[lua_matrix_getmethod]] function described
later.  (Recall that the dot syntax in Lua is a type of indexing,
so that [[A.print()]] is equivalent to [[A["print"]()]].)

The [[gettable]] tag method receives the tagged object and the index.

<<register functions>>=
lua_pushcclosure(L, lua_matrix_gettable, 0);
lua_settagmethod(L, lua_matrix_tag, "gettable");
@ 

<<static functions>>=
static int lua_matrix_gettable(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,1);
    int k;

    if (!lua_isnumber(L,2)) {
        if (lua_isstring(L,2))
            return lua_matrix_getmethod(L);
        else
            lua_error(L, "Index must be a number");
    }
    k = (int) lua_tonumber(L,2);

    if (k <= 0 || k > A->m * A->n)
        lua_error(L, "Index out of range");

    lua_settop(L,0);
    lua_pushnumber(L, Mk(A,k));
    return 1;
}

@ 


\subsection{Matrix setter}

The indexed write operation can only do one thing: set a matrix
entry.  The [[settable]] tag method gets the tagged object,
the index, and the value to write on the stack.

<<register functions>>=
lua_pushcclosure(L, lua_matrix_settable, 0);
lua_settagmethod(L, lua_matrix_tag, "settable");
@ 

<<static functions>>=
static int lua_matrix_settable(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,1);
    int k;

    if (!lua_isnumber(L,2))
        lua_error(L, "Index must be a number");

    if (!lua_isnumber(L,3))
        lua_error(L, "Value must be a number");

    k = (int) lua_tonumber(L,2);
    if (k <= 0 || k > A->m*A->n)
        lua_error(L, "Index out of range");

    Mk(A,k) = lua_tonumber(L,3);

    lua_settop(L,0);
    return 0;
}

@ 


\subsection{Matrix arithmetic operations}

The [[lua_matrix_add]] and [[lua_matrix_sub]] methods are attached
to the add and subtract events.  The [[lua_matrix_unm]] method is
attached to the unary negation event.

<<register functions>>=
lua_pushcclosure(L, lua_matrix_add, 0);
lua_settagmethod(L, lua_matrix_tag, "add");
@ 

<<static functions>>=
static int lua_matrix_add(lua_State* L)
{
    int i, j;
    <<get binary operands>>

    <<check summand conformality>>
    C = lua_matrix_create(A->m, A->n);

    for (i = 1; i <= A->m; ++i)
        for (j = 1; j <= A->n; ++j)
            Mij(C,i,j) = Mij(A,i,j) + Mij(B,i,j);

    <<return [[C]]>>
}

@ 

<<register functions>>=
lua_pushcclosure(L, lua_matrix_sub, 0);
lua_settagmethod(L, lua_matrix_tag, "sub");
@ 

<<static functions>>=
static int lua_matrix_sub(lua_State* L)
{
    int i, j;
    <<get binary operands>>

    <<check summand conformality>>
    C = lua_matrix_create(A->m, A->n);

    for (i = 1; i <= A->m; ++i)
        for (j = 1; j <= A->n; ++j)
            Mij(C,i,j) = Mij(A,i,j) - Mij(B,i,j);

    <<return [[C]]>>
}

@ 

<<register functions>>=
lua_pushcclosure(L, lua_matrix_unm, 0);
lua_settagmethod(L, lua_matrix_tag, "unm");
@ 

<<static functions>>=
static int lua_matrix_unm(lua_State* L)
{
    int i, j;
    <<get unary operand>>

    C = lua_matrix_create(A->m, A->n);

    for (i = 1; i <= A->m; ++i)
        for (j = 1; j <= A->n; ++j)
            Mij(C,i,j) = -Mij(A,i,j);

    <<return [[C]]>>
}

@ 

<<register functions>>=
lua_pushcclosure(L, lua_matrix_mul, 0);
lua_settagmethod(L, lua_matrix_tag, "mul");
@ 

<<static functions>>=
static int lua_matrix_mul(lua_State* L)
{
    extern int dgemm_(char* transA, char* transB, int* m, int* n, int* k,
                      double* alpha, double* A, int* ldA,
                      double* B, int* ldB,
                      double* beta, double* C, int* ldC);

    double one  = 1;
    double zero = 0;
    <<get binary operands>>

    if (A->n != B->m)
        lua_error(L, "Nonconformal matrices");

    C = lua_matrix_create(A->m, B->n);

#ifdef HAS_LAPACK

    dgemm_("N", "N", &(C->m), &(C->n), &(A->m),
           &one, A->data, &(A->ld),
           B->data, &(B->ld),
           &zero, C->data, &(C->ld));

#else
    lua_error(L, "Dense linear algebra routines not linked\n");
#endif /* HAS_LAPACK */

    <<return [[C]]>>
}

@ 

<<get binary operands>>=
lua_matrix_t A, B, C;

if (lua_tag(L,1) != lua_matrix_tag || lua_tag(L,2) != lua_matrix_tag)
    lua_error(L, "Invalid operands");

A = lua_touserdata(L,1);
B = lua_touserdata(L,2);
@ 

<<get unary operand>>=
lua_matrix_t A = lua_touserdata(L,1);
lua_matrix_t C;
@ 

<<check summand conformality>>=
if (A->m != B->m || A->n != B->n)
    lua_error(L, "Noncomformal matrices");

@ 

<<return [[C]]>>=
lua_settop(L,0);
lua_pushusertag(L, C, lua_matrix_tag);
return 1;
@ 

\subsection{[[matrix]] command}

The [[matrix]] command creates a new matrix of a specified size.
The user is allowed to leave off the second argument $n$;
if it is not explicitly specified, $n$ is assumed to be $1$.
The sizes are only somewhat sanity checked -- there is no
check to make sure that $mn$ is not humongous, and we fail
gracelessly if the memory allocations fail.

After the numeric arguments, the user may also specify a table
of array contents in \emph{row-major} order.  The idea is that
\begin{verbatim}
  A = matrix(2,2, {1, 2,
                   3, 4})
\end{verbatim}
is probably the most natural way to initialize a little two-by-two
example matrix.  It should also be possible to write
\begin{verbatim}
  A = matrix{1, 2, 3}
\end{verbatim}
to get a three-element vector.

<<register functions>>=
lua_register(L, "matrix", lua_matrix);
@ 

<<static functions>>=
static int lua_matrix(lua_State* L)
{
    int nargs = lua_gettop(L);
    lua_matrix_t A;
    int i,j;
    int m = 0, n = 0;
    int init_table = 0;

    <<get [[matrix]] parameters>>

    A = lua_matrix_create(m,n);

    <<initialize matrix from table>>

    lua_settop(L,0);
    lua_pushusertag(L, A, lua_matrix_tag);
    return 1;
}

@ 

<<get [[matrix]] parameters>>=
for (i = 1; i <= nargs; ++i) {
    if (lua_isnumber(L,i)) {
        int val = (int) lua_tonumber(L,i);
        if (val <= 0)
            lua_error(L, "Size out of bounds");

        if      (m == 0)  m = val;
        else if (n == 0)  n = val;
        else              lua_error(L, "Too many size parameters");

    } else if (lua_istable(L,i)) {
        if (init_table == 0)
            init_table = i;
        else
            lua_error(L, "Too many initializers");
    }
}

@ 

<<get [[matrix]] parameters>>=
if (m == 0) {
    if (init_table) {
        m = lua_getn(L,init_table);
        if (m == 0)
            lua_error(L, "Insufficient initializer entries");
    }
}

if (n == 0)
    n = 1;

if (init_table && lua_getn(L,init_table) > m*n)
    lua_error(L, "Initializer too large");

@ 

<<initialize matrix from table>>=
if (init_table) {
    int k = 1;
    for (i = 1; i <= m; ++i) {
        for (j = 1; j <= n; ++j) {
            lua_rawgeti(L,init_table, k++);
            if (lua_isnumber(L,-1))
                Mij(A,i,j) = lua_tonumber(L,-1);
            lua_pop(L,1);
        }
    }
}
@ 

\subsection{Matrix [[print]] method}

Matlab's wrapped matrix output format is \emph{really} nice when you
have to inspect matrices of moderate size.  The [[print_matrix]] routine
emulates Matlab's behavior for [[format short e]].

<<call Lua print for buffer>>=
lua_pushvalue(L, -1);
lua_pushstring(L, buf);
lua_rawcall(L, 1, 0);
@ 

<<static functions>>=
static void print_matrix(lua_State* L, lua_matrix_t A)
{
    int i, j, c;
    int m = A->m;
    int n = A->n;
    char buf[256];

    lua_getglobal(L, "print");
    for (c = 1; c <= n; c += 6) {

        if (n > 6) {
            sprintf(buf, "  Columns %d through %d\n", 
		    c, (c+5 > n) ? n : c+5);
	    <<call Lua print for buffer>>
	}

        for (i = 1; i <= m; ++i) {
	    char num[64];

	    *buf = '\0';
            for (j = c; j <= n && j < c+6; ++j) {
                if (Mij(A,i,j))
                    sprintf(num, "  % .4e", Mij(A,i,j));
                else
                    sprintf(num, "            0");
		strcat(buf, num);
            }
	    <<call Lua print for buffer>>

        }
	buf[0] = ' ';
        buf[1] = '\0';
	<<call Lua print for buffer>>
    }
    lua_pop(L,1);
}

@ 

The [[matrix_print]] routine (also known as the [[print]] method
for a matrix object) uses [[print_matrix]] to output a reasonably
pretty representation of the matrix.

<<static functions>>=
static int lua_matrix_print(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);

    if (lua_gettop(L) != 1)
        lua_error(L, "Wrong number of arguments");

    print_matrix(L, A);
    lua_settop(L, 0);
    return 0;
}

@ 


\subsection{Matrix [[factor]] method}

The [[matrix_factor]] function computes $A = PLU$ using LAPACK's %'
[[DGETRF]] routine.

<<static functions>>=
static int lua_matrix_factor(lua_State* L)
{
    extern int dgetrf_(int* m, int* n, double* A, int* ldA,
                       int* ipiv, int* info);

    lua_matrix_t A = lua_touserdata(L,-1);
    int info;

    if (A->m != A->n)
        lua_error(L, "Matrix must be square");

#ifdef HAS_LAPACK
    if (A->ipiv == NULL) {
	A->ipiv = calloc(A->m, sizeof(int));
	dgetrf_(&(A->m), &(A->n), A->data, &(A->ld), A->ipiv, &info);    
	if (info != 0) {
	    printf("dgetrf failed with error code %d\n", info);
	    lua_error(L, "Error during factorization");
	}
    }
#else
    lua_error(L, "Dense linear algebra not linked\n");
#endif

    lua_settop(L,0);
    lua_pushusertag(L, A, lua_matrix_tag);
    return 1;
}

@ 


\subsection{Matrix [[solve]] method}

The [[matrix_solve]] function computes $x := A^{-1} x$ given a factored
matrix $A$.  If the matrix has not already been factored, we will factor
it.

<<static functions>>=
static int lua_matrix_solve(lua_State* L)
{
    extern int dgetrs_(char* trans, int* n, int* nrhs, double* A, int* ldA,
                       int* ipiv, double* B, int* ldB, int* info);

    lua_matrix_t A = lua_touserdata(L,-1);
    lua_matrix_t B;
    int info;

    if (lua_gettop(L) != 2)
        lua_error(L, "Wrong number of arguments");

    if (lua_tag(L,1) != lua_matrix_tag)
        lua_error(L, "Argument must be a matrix");
    B = lua_touserdata(L,1);

    if (A->ipiv == NULL) {
	lua_matrix_factor(L);
    }

    if (A->n != B->m)
        lua_error(L, "Dimension mismatch");

#ifdef HAS_LAPACK
    dgetrs_("N", &(A->n), &(B->n), A->data, &(A->ld), A->ipiv, 
            B->data, &(B->ld), &info);    
    if (info != 0)
        printf("Solve failed with error code %d\n", info);

#else
    lua_error(L, "Dense linear algebra libraries not linked\n");
#endif

    lua_settop(L,0);
    lua_pushusertag(L, B, lua_matrix_tag);
    return 1;
}

@ 


\subsection{Matrix [[clone]] method}

The [[matrix_clone]] function ([[clone]] method) makes a full
copy of a matrix object.

<<static functions>>=
static int lua_matrix_clone(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);
    lua_matrix_t B;
    int j;

    if (lua_gettop(L) != 1)
        lua_error(L, "Too many arguments");

    B = lua_matrix_create(A->m, A->n);
    for (j = 1; j <= A->n; ++j)
        memcpy(&Mij(B,1,j), &Mij(A,1,j), A->m * sizeof(double));

    if (A->ipiv) {
        B->ipiv = calloc(A->m, sizeof(int));
        memcpy(B->ipiv, A->ipiv, A->m * sizeof(int));
    }

    lua_settop(L,0);
    lua_pushusertag(L, B, lua_matrix_tag);
    return 1;
}

@ 

\subsection{Matrix [[slice]] method}

The matrix [[slice]] command returns a copy of a subscripted slice
of the matrix $A$.

<<static functions>>=
static int lua_matrix_slice_method(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);
    lua_matrix_t B;
    int n = lua_gettop(L);
    int i1, i2, j1 = 1, j2 = 1;

    <<get slice subscript arguments>>

    B = lua_matrix_slice(A,i1,i2,j1,j2);

    lua_settop(L,0);
    lua_pushusertag(L, B, lua_matrix_tag);
    return 1;
}

@ 

<<get slice subscript arguments>>=
if (n != 3 && n != 5)
    lua_error(L, "Wrong number of arguments");

if (!lua_isnumber(L,1) || !lua_isnumber(L,2) ||
    (n == 5 && (!lua_isnumber(L,3) || !lua_isnumber(L,4))))
    lua_error(L, "Subscripts must be numeric");

i1 = (int) lua_tonumber(L,1);
i2 = (int) lua_tonumber(L,2);
if (n == 5) {
    j1 = (int) lua_tonumber(L,3);
    j2 = (int) lua_tonumber(L,4);
}

if (i1 <= 0 || i2 < i1 || i2 > A->m ||
    j1 <= 0 || j2 < j1 || j2 > A->n)
    lua_error(L, "Bad subscripts");

@ 

\subsection{Matrix [[free]] method}

The [[matrix_free]] function (also known as the [[free]] method)
deallocates the object memory.  It should probably be called on
Lua garbage collection, but it isn't yet.

<<static functions>>=
static int lua_matrix_free(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);

    if (lua_gettop(L) != 1)
        lua_error(L, "Too many arguments");

    lua_matrix_destroy(A);

    lua_settop(L,0);
    return 0;
}

@ 


\subsection{[[m]] and [[n]] fields}

<<static functions>>=
static int lua_matrix_m(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);
    lua_settop(L,0);
    lua_pushnumber(L, A->m);
    return 1;
}

static int lua_matrix_n(lua_State* L)
{
    lua_matrix_t A = lua_touserdata(L,-1);
    lua_settop(L,0);
    lua_pushnumber(L, A->n);
    return 1;
}

@ 


\subsection{Method recall}

When a matrix object is indexed by a method name string,
we return a Lua closure that implements the method.
So when the user requests [[A.print]], for instance,
the returned closure object will have [[A]] as its final
argument when it is called.

On entry, the Lua stack contains the matrix object
and the name string.

<<static prototypes>>=
static int lua_matrix_getmethod(lua_State* L);

@ 

<<static functions>>=
static int lua_matrix_getmethod(lua_State* L)
{
    const char* name = lua_tostring(L,2);

    lua_pop(L,1);
    if (strcmp(name, "print") == 0)
        lua_pushcclosure(L, lua_matrix_print, 1);
    else if (strcmp(name, "free") == 0)
        lua_pushcclosure(L, lua_matrix_free, 1);
    else if (strcmp(name, "factor") == 0)
        lua_pushcclosure(L, lua_matrix_factor, 1);
    else if (strcmp(name, "solve") == 0)
        lua_pushcclosure(L, lua_matrix_solve, 1);
    else if (strcmp(name, "clone") == 0)
        lua_pushcclosure(L, lua_matrix_clone, 1);
    else if (strcmp(name, "slice") == 0)
        lua_pushcclosure(L, lua_matrix_slice_method, 1);
    else if (strcmp(name, "m") == 0)
        lua_matrix_m(L);
    else if (strcmp(name, "n") == 0)
        lua_matrix_n(L);
    else
        lua_error(L, "Invalid method name");

    return 1;
}

@ 


\subsection{Public matrix manipulation}

<<functions>>=
lua_matrix_t lua_matrix_create(int m, int n)
{
    lua_matrix_t C;

    C = calloc(1, sizeof(*C));
    C->owns_data = 1;
    C->ld = m;
    C->m  = m;
    C->n  = n;
    C->data = calloc(m*n, sizeof(double));
    return C;
}

void lua_matrix_destroy(lua_matrix_t self)
{
    if (self->ipiv)
        free(self->ipiv);

    if (self->owns_data)
        free(self->data);

    free(self);
}

@ 

<<functions>>=
lua_matrix_t lua_matrix_slice(lua_matrix_t A, int i1, int i2, int j1, int j2)
{
    lua_matrix_t C;

    C = calloc(1, sizeof(*C));
    C->owns_data = 0;
    C->ld   = A->ld;
    C->m    = (i2-i1)+1;
    C->n    = (j2-j1)+1;
    C->data = &Mij(A,i1,j1);
    return C;
}

@ 

\subsection{Setting and removing vectors}

The [[lua_matrix_push]] function is a thin wrapper around
[[lua_pushusertag]].  Similarly, [[lua_matrix_get]] is a
thin wrapper around [[lua_touserdata]].  The only reason we
don't want the user to directly use the [[lua_pushusertag]] and 
[[lua_touserdata]] functions is that then we would have
to expose the matrix tag value to the world.  That wouldn't
be a tragedy, but it would be nice to keep it private.

<<functions>>=
void lua_matrix_push(lua_State* L, lua_matrix_t matrix)
{
    lua_pushusertag(L, matrix, lua_matrix_tag);
}

lua_matrix_t lua_matrix_get(lua_State* L, int index)
{
    if (index > lua_gettop(L))
        lua_error(L, "Index out of range");

    if (lua_tag(L,index) != lua_matrix_tag)
        lua_error(L, "Variable is not a matrix");

    return lua_touserdata(L,index);
}

@ 


\subsection{Registration functions}

<<functions>>=
void lua_matrix_register(lua_State* L)
{
    lua_matrix_tag = lua_newtag(L);
    <<register functions>>
}

@ 
