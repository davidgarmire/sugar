
\section{Introduction}

The [[netdraw-mex]] module is the MEX interface to the SUGAR graphics
context type.  It is \emph{not} the wrapper for implementing graphics
interfaces in Matlab.


\section{Interface}

<<netdraw-mex.h>>=
#ifndef NETDRAW_MEX_H
#define NETDRAW_MEX_H

#include <mex.h>
#include "netdraw.h"

void gc_mex_register();
void gc_mex_shutdown();
int  gc_mex_handle_tag();

netdraw_gc_t* mx_to_gc(const mxArray* array);

#endif /* NETDRAW_MEX_H */
@ 


\section{Implementation}

<<netdraw-mex.c>>=
#include "mesh.h"
#include "netdraw-xt.h"
#include "netdraw-mlab.h"

#include "mex-handle.h"
#include "sugarmex.h"
#include "netdraw-mex.h"
#include "mesh-mex.h"

static int gc_handle_tag;

<<mex functions>>
<<functions>>
@ 


\subsection{[[display]] command}

<<cho-display.m>>=
function cho_display(mesh, x, gctype)

if nargin < 3
  gctype = 'matlab';
end

if strcmp(gctype, 'xt')
  if (nargin > 1) & ~isempty(x)
    sugarmex('xt_draw', mesh, x)    
  else
    sugarmex('xt_draw', mesh)
  end
elseif strcmp(gctype, 'matlab')
  if (nargin > 1) & ~isempty(x)
    cho_mdraw(mesh, x)
  else
    cho_mdraw(mesh)
  end
end
@ 


\subsection{[[xt_draw]] command}

<<cho-xt-draw.m>>=
function cho_xt_draw(mesh)
sugarmex('xt_draw', mesh);
@ 

<<register functions>>=
#ifdef HAS_X11
mexmgr_add("xt_draw", xt_draw);
#endif
@ 

<<mex functions>>=
#ifdef HAS_X11
static void xt_draw(int nlhs, mxArray* plhs[],
                    int nrhs, const mxArray* prhs[])
{
    static int   argc = 1;
    static char* argv = "dummy";
    mesh_t mesh;
    double* x = NULL;

    mex_check_num_args(nrhs, 1);
    mesh = mx_to_mesh(prhs[0]);

    if (nrhs > 1) {
        int nactive = assemble_get_active(mesh_assembler(mesh));
        if (!mxIsNumeric(prhs[1]) || 
                mxGetM(prhs[1]) != nactive || mxGetN(prhs[1]) != 1)
            mexErrMsgTxt("Incorrect displacement vector");
        x = mxGetPr(prhs[1]);
    }

    xtnetdraw_init(argc, &argv);
    xtnetdraw(mesh, x);
}
#endif

@ 


\subsection{[[mdraw]] command}

<<cho-mdraw.m>>=
function cho_mdraw(mesh, x)

clf;
grid on;
hold on;
view(0,90);
xlabel('X - horizontal  [m]');
ylabel('Y - vertical  [m]');
zlabel('Z - out of plane  [m]');

if nargin == 1
    sugarmex('mdraw', mesh);
else
    sugarmex('mdraw', mesh, x);
end    

rotate3d on;
color=pink;
color(:,2)=color(:,2)*(0.5 + 0.5*rand);
color(:,1)=color(:,1)*(0.5 + 0.5*rand);
color(:,3)=color(:,3)*(0.5 + 0.5*rand);
colormap(color);
shading interp;
axis equal;
axis vis3d;
hold off;

@ 

<<register functions>>=
mexmgr_add("mdraw", mdraw);
@ 

<<mex functions>>=
static void mdraw(int nlhs, mxArray* plhs[],
                  int nrhs, const mxArray* prhs[])
{
    mesh_t  mesh;
    double* x = NULL;

    mex_check_num_args(nrhs, 1);
    mesh = mx_to_mesh(prhs[0]);

    if (nrhs > 1) {
        int nactive = assemble_get_active(mesh_assembler(mesh));
        if (!mxIsNumeric(prhs[1]) || 
                mxGetM(prhs[1]) != nactive || mxGetN(prhs[1]) != 1)
            mexErrMsgTxt("Incorrect displacement vector");
        x = mxGetPr(prhs[1]);
    }

    netdraw_mlab(mesh, x);
}

@ 


\subsection{[[draw_beam]] command}

<<cho-draw-beam.m>>=
function cho_draw_beam(gc, transform, l, w, h, vindex)
sugarmex('draw_beam', gc, transform, l, w, h, vindex);
@ 

<<register functions>>=
mexmgr_add("draw_beam", draw_beam);
@ 

<<mex functions>>=
static void draw_beam(int nlhs, mxArray* plhs[],
                      int nrhs, const mxArray* prhs[])
{
    netdraw_gc_t* gc;
    double* transform;
    double l, w, h;
    int* vindex;
    int i;

    mex_check_num_args(nrhs, 6);
    gc = mx_to_gc(prhs[0]);
    l  = mx_to_double(prhs[2]);
    w  = mx_to_double(prhs[3]);
    h  = mx_to_double(prhs[4]);

    if (!mxIsNumeric(prhs[1]) || mxGetM(prhs[1]) != 3 || mxGetN(prhs[2]) != 4)
        mexErrMsgTxt("Invalid transform argument");

    if (!mxIsNumeric(prhs[2]) || mxGetM(prhs[5]) * mxGetN(prhs[5]) != 12)
        mexErrMsgTxt("Invalid variable index vector");

    transform = mxGetPr(prhs[1]);
    vindex = mxCalloc(12, sizeof(double));
    for (i = 0; i < 12; ++i)
        vindex[i] = (mxGetPr(prhs[5]))[i];

    netdraw_beam(gc, transform, l, w, h, vindex);

    mxFree(vindex);
}

@ 


\subsection{Net drawing data structure}

<<functions>>=
netdraw_gc_t* mx_to_gc(const mxArray* array)
{
    return mx_to_handle(array, gc_handle_tag, "Invalid gc handle");
}

@ 

<<functions>>=
void gc_mex_register()
{
    gc_handle_tag = mex_handle_new_tag();
    <<register functions>>
}

void gc_mex_shutdown()
{
}

int gc_mex_handle_tag()
{
    return gc_handle_tag;
}

@ 

