\subsection{Introduction}

The [[subnetize]] file includes Lua code related to turning an ordinary
function into a subnet.  Internally, the code segment
\begin{verbatim}
subnet foo(A, material, l)
  -- stuff --
end
\end{verbatim}
is equivalent to
\begin{verbatim}
function foo(args)
  local A        = args[1] or args.A or 
                   (args.material and args.material.A)
  local material = args[2] or args.material or 
                   (args.material and args.material.material)
  local l        = args[3] or args.l or 
                   (args.material and args.material.l)
end
foo = subnetize(foo)
\end{verbatim}

Thus, almost all the work of making a subnet be a subnet goes
into the [[subnetize]] function.  This module defines the
standard version of [[subnetize]], which maintains a heirarchical
namespace for nodes declared in subnets and maintains the stack
of nested local coordinate systems defined in the [[xformstack]]
module.


\subsection{Implementation}

<<subnetize.lua>>=
use("xformstack.lua")

<<initialize data structures>>
<<functions>>
@ 

The [[namestack]] is a stack of prefixes for names declared in the
current scope.  For the global scope, the stack entry is an empty
string (when you say ``foo'', you mean ``foo'').  Inside of a subnet
instance ``bar,'' though, when you make a node named ``foo'' you actually
get ``bar.foo.''  Therefore, the prefix ``bar.'' is stored on the
stack while processing the subnet instance.

The [[localnames]] is a table of names for local nodes (nodes in the current
scope).

<<initialize data structures>>=
-- Stack of node name prefixes
_namestack = {""; n = 1, nanon = 0};

-- Table of node names in the current scope
_localnames = {};

@ 

The [[subnetize]] function transforms a function that creates a substructure
into a function that creates a substructure in a nested coordinate frame.

<<functions>>=
function subnetize(f)
  return function(p)
    <<add name of current subnet instance to stack>>

    local old_localnames = _localnames
    _localnames = {};

    <<form $T$ from [[ox]], [[oy]], and [[oz]]>>
    xform_push(T)

    %f(p)

    xform_pop()
    _localnames = old_localnames
    _namestack.n = _namestack.n - 1
  end
end

@

When we add a new subnet instance, we store its extended name on
the stack.  If it has no name, it is assigned a name beginning
with the tag ``anon.''

<<add name of current subnet instance to stack>>=
local name = p.name
if not name then
  name = "anon" .. _namestack.nanon
  _namestack.nanon = _namestack.nanon + 1
end
_namestack[_namestack.n + 1] = _namestack[_namestack.n] .. name .. "."
_namestack.n = _namestack.n + 1

if p.name then
  p.name = _namestack[_namestack.n-1] .. name
end
@

When setting up coordinate transformations,
we rotate about the $y$ axis, then $z$, then $x$.  I am unsure why
that convention was chosen, but it is the same convention used in
SUGAR 2.0.

<<form $T$ from [[ox]], [[oy]], and [[oz]]>>=
local T = xform_identity()

if p.oy then
  T = xform_compose(T, xform_oy(p.oy))
  p.oy = nil
end

if p.oz then
  T = xform_compose(T, xform_oz(p.oz))
  p.oz = nil
end

if p.ox then
  T = xform_compose(T, xform_ox(p.ox))
  p.ox = nil
end

@

<<functions>>=
-- Create a new node.  If something with the same name
-- already exists in the current scope, use that.
--
function node(args)
  if type(args) == "string" then
    args = {name = args}
  end

  local name = args.name
  if not name then
    name = "anon" .. _namestack.nanon
    _namestack.nanon = _namestack.nanon + 1
  end

  if not _localnames[name] then 
    args.name = _namestack[_namestack.n] .. name
    _localnames[name] = %node(args)
  end

  return _localnames[name]
end

@ 

