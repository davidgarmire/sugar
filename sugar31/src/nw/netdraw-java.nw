\section{Introduction}

The [[netdraw-java]] module writes a device geometry to a file
that can be read by the Java viewer.


\section{Interface}

<<netdraw-java.h>>=
#ifndef NETDRAW_JAVA_H
#define NETDRAW_JAVA_H

#include <mesh.h>

void javawrite(FILE* fp, mesh_t mesh, double* x, int num_vars);

#endif /* NETDRAW_JAVA_H */
@ 


\section{Implementation}

<<netdraw-java.c>>=
#include <sugar.h>

#ifdef HAVE_XDR

#include <stdio.h>
#include <rpc/xdr.h>

#include <netdraw_java.h>
#include <netdraw.h>

<<static functions>>
<<beam function>>
<<functions>>

#endif /* HAVE_XDR */
@ 

\subsection{XDR output}

Since Java saves data in standard network order, which is why we're
using the external data representation (XDR) routines.

<<create XDR stream>>=
xdrstdio_create(&xdrs, fp, XDR_ENCODE);
@ 

<<destroy XDR stream>>=
xdr_destroy(&xdrs);
@ 

Because the XDR routines are used for both input and output,
they pass the variables by pointer.  It's convenient for us
to write convenience functions that take their parameters
by value.  Also, since it's overkill to write double precision
values for something that will just go to the display, we
actually convert double precision numbers to single precision
before writing them out.

<<static functions>>=
static void write_int(XDR* xdrs, int i)
{
    xdr_int(xdrs, &i);
}

static void write_double(XDR* xdrs, double d)
{
    float ftmp = (float) d;
    xdr_float(xdrs, &ftmp);
}

@ 


\subsection{Draw commands}

The records for elements in the Java display routine consist
of a type identifier (beams are element type 1 to the display
routine), followed by type-specific data.  For a beam, the
record consists of the rotation to global coordinates,
the dimensions of the beam, the translation part of the transformation
to global coordinates, and the indices of the variables.

<<beam function>>=
static void beam(void* xdrsp, double* transform, double l, double w, double h,
                 int* vindex)
{
    XDR*  xdrs = (XDR*) xdrsp;
    int   i;

    write_int(xdrs, 1);

    for (i = 0; i < 9; ++i)
        write_double(xdrs, transform[i]);

    write_double(xdrs, l);
    write_double(xdrs, w);
    write_double(xdrs, h);

    for (i = 10; i < 12; ++i)
        write_double(xdrs, transform[i]);

    for (i = 0; i < 12; ++i)
        write_int(xdrs, vindex[i]);
}

@ 


\subsection{Main routine}

<<functions>>=
void javawrite(FILE* fp, mesh_t mesh, double* x, int num_vars)
{
    XDR xdrs;
    int i, n;
    <<declare Java writer context>>

    <<create XDR stream>>
    <<write header>>
    <<write element records>>
    <<write displacement vector>>
    <<destroy XDR stream>>    
}

@ 

The Java viewer file consists of
\begin{itemize}
  \item A header
  \item Element geometry records
  \item A displacement vector
\end{itemize}

The header is a single integer -- the number of geometry records.
I hope to change the format some so that there is an end record
rather than a count in the header.

<<write header>>=
n = 0;
for (i = 1; i <= mesh_num_elements(mesh); ++i) {
    element_t* element = mesh_element(mesh, i);
    if (element->model->display)
        ++n;
}

write_int(&xdrs, n);

@ 

The geometry records are provided by the individual elements.
We made the (not very good) assumption above that the number
of records is equal to the number of routines that have display
values.

<<declare Java writer context>>=
netdraw_fun_t java_draw_fun = { NULL, NULL, beam, NULL };
netdraw_gc_t  java_gc;

java_gc.methods = &java_draw_fun;
java_gc.data    = &xdrs;
@ 

<<write element records>>=
for (i = 1; i <= mesh_num_elements(mesh); ++i)
    element_display( mesh_element(mesh, i), &java_gc );

@ 

Right now, we need \emph{some} displacement vector, even if
we want to display the undisplaced structure.  Probably not
the best way to arrange things, but it worked.  So if [[x]]
is NULL, we output an appropriately sized vector of zeros.

<<write displacement vector>>=
for (i = 0; i < num_vars; ++i)
    write_double(&xdrs, (x != NULL) ? x[i] : 0);
@ 
