
\section{Introduction}

The [[netdraw-mlab]] module implements a Matlab drawing context.
It is not the Matlab interface to the drawing system -- that is
implemented in [[netdraw-mex]].


\section{Interface}

<<netdraw-mlab.h>>=
#ifndef NETDRAW_MLAB_H
#define NETDRAW_MLAB_H

#include <netdraw.h>
#include <mesh.h>

void netdraw_mlab(mesh_t mesh, double* x);

#endif /* NETDRAW_MLAB_H */
@ 


\section{Implementation}

<<netdraw-mlab.c>>=
#include <sugar.h>

#include <mex.h>

#include <mesh.h>
#include <vars.h>
#include <assemble.h>
#include <affine.h>

#include <sugarmex.h>
#include <netdraw_mlab.h>

<<static functions>>
<<functions>>
@ 


\subsection{Drawing beams}

<<static functions>>=
static void draw_beam(void* pself, double* transform,
                              double l, double w, double h,
                              int* vindex)
{
    double* x = (double*) pself;
    double* xlocal;
    int i;
    mxArray* prhs[5];

    prhs[0] = mxCreateDoubleMatrix(3, 4, mxREAL);
    memcpy(mxGetPr(prhs[0]), transform, 12*sizeof(double));

    prhs[1] = mx_from_double(l);
    prhs[2] = mx_from_double(w);
    prhs[3] = mx_from_double(h);

    prhs[4] = mxCreateDoubleMatrix(12, 1, mxREAL);
    xlocal  = mxGetPr(prhs[4]);
    if (x) {
        for (i = 0; i < 12; ++i)
            xlocal[i] = x[vindex[i]];
        for (i = 0; i < 12; i += 3)
            affine_apply_AT(transform, xlocal + i);
    } else
        memset(xlocal, 0, 12*sizeof(double));

    mexCallMATLAB(0, NULL, 5, prhs, "cho_draw_mlab_beam");
}

@ 

<<cho-draw-mlab-beam.m>>=
function cho_draw_mlab_beam(T, L, W, H, q)

resolution = 20;

<<get local coordinates>>
<<compute rotated corner displacements>>
<<build interpolants in local coordinates>>
<<build interpolants in global coordinates>>
<<plot the surfaces>>

<<hermite cubic function>>
@ 

<<get local coordinates>>=
 x1 =  q(1);  y1 =  q(2);  z1 =  q(3);
rx1 =  q(4); ry1 =  q(5); rz1 =  q(6);
 x2 =  q(7);  y2 =  q(8);  z2 =  q(9);
rx2 = q(10); ry2 = q(11); rz2 = q(12);

@ 

<<compute rotated corner displacements>>=
A = [0    0    0    0;
     W/2  W/2 -W/2 -W/2;
    -H/2  H/2  H/2 -H/2];
B = A;

A = rot2local(rx1, ry1, rz1)' * A;
B = rot2local(rx2, ry2, rz2)' * B;

@ 

<<build interpolants in local coordinates>>=
s = linspace(0, L, resolution); 

hx = x1 + (1 + (x2-x1)/L)*s;
hy = hermite_cubic(L, y1,rz1, y2,rz2, s);
hz = hermite_cubic(L, z1,-ry1, z2,-ry2, s);

@ 

<<build interpolants in global coordinates>>=
for corner = 1 : 4

  px = A(1,corner) + (B(1,corner)-A(1,corner))*s/L + hx;
  py = A(2,corner) + (B(2,corner)-A(2,corner))*s/L + hy;
  pz = A(3,corner) + (B(3,corner)-A(3,corner))*s/L + hz;

  p = T(1:3,1:3) * [px; py; pz];

  u(corner,:) = p(1,:) + T(1,4);
  v(corner,:) = p(2,:) + T(2,4);
  w(corner,:) = p(3,:) + T(3,4);
 
end

@ 

<<plot the surfaces>>=
X = [u(1:4,:); u(1,:)];
Y = [v(1:4,:); v(1,:)];
Z = [w(1:4,:); w(1,:)];

surfl(X,Y,Z); 

@ 

<<hermite cubic function>>=
function [f] = hermite_cubic(L, f0, f00, fL, fLL, s)

f0L   = (fL - f0)/L;
f00L  = (f0L - f00)/L;
f0LL  = (fLL - f0L)/L;
f00LL = (f0LL - f00L)/L;

f = f0 + s.*(f00 + s.*(f00L + (s-L).*f00LL));

@ 

\subsection{Get displacement vector}

<<static functions>>=
static double* get_x(void* pself)
{
    return (double*) pself;
}

@

\subsection{Main routine}

<<functions>>=
void netdraw_mlab(mesh_t mesh, double* x)
{
    netdraw_fun_t methods;
    netdraw_gc_t  gc;
    double*       xall;

    int          i, n;
    vars_mgr_t   vars_mgr  = mesh_vars_mgr(mesh);
    assembler_t  assembler = mesh_assembler(mesh);
    int          nvars     = vars_count(vars_mgr);
    int          nactive   = assemble_get_active(assembler);

    double*      displacements = assemble_get_displacements(assembler);

    memset(&methods, 0, sizeof(methods));
    methods.beam = draw_beam;
    methods.line = NULL;
    methods.plane = NULL;
    methods.get_x = get_x;

    gc.methods   = &methods;
    xall         = mxCalloc(nvars, sizeof(double));
    if (x) {
        memcpy(xall, displacements, nvars * sizeof(double));
        memcpy(xall, x, nactive * sizeof(double));
    }

    gc.data = xall;
    n = mesh_num_elements(mesh);
    for (i = 1; i <= n; ++i)
        element_display( mesh_element(mesh, i), &gc );

    mxFree(xall);
}

@ 
