
\section{Introduction}

The [[superlu-lua]] module adds Lua support for calls to the SuperLU
interface defined in [[superlu.nw]].  Supported functions are
\begin{itemize}
  \item [[A.print()]]:   print matrix
  \item [[A.factor()]]:  factor matrix
  \item [[A.solve(x)]]:  compute $x := A^{-1}x$
  \item [[A.free()]]:    free matrix
\end{itemize}


\section{Interface}

<<superlu-lua.h>>=
#ifndef SUPERLU_LUA_H
#define SUPERLU_LUA_H 

#include <lua.h>
#include <superlu.h>

void      lua_superlu_register(lua_State* L);
void      lua_superlu_push(lua_State* L, superlu_t matrix);
superlu_t lua_superlu_get(lua_State* L, int index);

#endif /* SUPERLU_LUA_H */
@ 

The [[lua_superlu_register]] function registers the functions of
the module with the Lua interpreter.  The [[lua_superlu_push]]
and [[lua_superlu_get]] functions add and get matrices
on the Lua stack.


\section{Implementation}

<<superlu-lua.c>>=
#include <sugar.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <superlu_lua.h>
#include <matrix_lua.h>

<<static data>>

#ifdef HAVE_SUPERLU
<<static functions>>
#endif

<<functions>>
@ 


\subsection{Matrix tag}

The [[lua_superlu_tag]] is the tag for the Lua SuperLU sparse matrix type.
Note that you \emph{could} get into trouble
with this if multiple interpreters are simultaneously active,
since the different interpreters may not end up allocating the same
tag value.

<<static data>>=
static int lua_superlu_tag;

@ 


\subsection{Matrix [[print]] method}

The [[matrix_print]] routine (also known as the [[print]] method
for a matrix object) uses [[print_matrix]] to output a reasonably
pretty representation of the matrix.

<<static functions>>=
static int lua_matrix_print(lua_State* L)
{
    superlu_t A = lua_touserdata(L,-1);

    if (lua_gettop(L) != 1)
        lua_error(L, "Wrong number of arguments");

    superlu_print(A);

    lua_settop(L, 0);
    return 0;
}

@ 


\subsection{Matrix [[factor]] method}

The [[matrix_factor]] function calls the [[superlu_factor]]
wrapper to access SuperLU's factorization routine [[dgstrf]]. %'

<<static functions>>=
static int lua_matrix_factor(lua_State* L)
{
    superlu_t A = lua_touserdata(L,-1);

    superlu_factor(A);

    lua_settop(L,0);
    lua_pushusertag(L, A, lua_superlu_tag);
    return 1;
}

@ 


\subsection{Matrix [[solve]] method}

The [[matrix_solve]] function computes $x := A^{-1} x$ given a factored
matrix $A$.  If the matrix has not already been factored, it will
be automatically factored by the SuperLU wrapper.

<<static functions>>=
static int lua_matrix_solve(lua_State* L)
{
    superlu_t A = lua_touserdata(L,-1);
    lua_matrix_t B;

    if (lua_gettop(L) != 2)
        lua_error(L, "Wrong number of arguments");

    B = lua_matrix_get(L,1);

    if (superlu_n(A) != B->m)
        lua_error(L, "Dimension mismatch");

    superlu_solve(A, B->data);

    lua_settop(L,0);
    lua_pushusertag(L, B, lua_superlu_tag);
    return 1;
}

@ 


\subsection{Matrix [[free]] method}

The [[matrix_free]] function (also known as the [[free]] method)
deallocates the object memory.  It should probably be called on
Lua garbage collection, but it isn't yet. %'

<<static functions>>=
static int lua_matrix_free(lua_State* L)
{
    superlu_t A = lua_touserdata(L,-1);

    if (lua_gettop(L) != 1)
        lua_error(L, "Too many arguments");

    superlu_destroy(A);

    lua_settop(L,0);
    return 0;
}

@ 


\subsection{Method recall}

When a matrix object is indexed by a method name string,
we return a Lua closure that implements the method.
So when the user requests [[A.print]], for instance,
the returned closure object will have [[A]] as its final
argument when it is called.

On entry, the Lua stack contains the matrix object
and the name string.

<<static functions>>=
static int lua_matrix_getmethod(lua_State* L)
{
    const char* name = lua_tostring(L,2);

    lua_pop(L,1);
    if (strcmp(name, "print") == 0)
        lua_pushcclosure(L, lua_matrix_print, 1);
    else if (strcmp(name, "free") == 0)
        lua_pushcclosure(L, lua_matrix_free, 1);
    else if (strcmp(name, "factor") == 0)
        lua_pushcclosure(L, lua_matrix_factor, 1);
    else if (strcmp(name, "solve") == 0)
        lua_pushcclosure(L, lua_matrix_solve, 1);
    else
        lua_error(L, "Invalid method name");

    return 1;
}

@ 


\subsection{Setting and removing vectors}

The [[lua_superlu_push]] function is a thin wrapper around
[[lua_pushusertag]].  Similarly, [[lua_superlu_get]] is a
thin wrapper around [[lua_touserdata]].  The only reason we
don't want the user to directly use the [[lua_pushusertag]] and 
[[lua_touserdata]] functions is that then we would have
to expose the matrix tag value to the world.  That wouldn't
be a tragedy, but it would be nice to keep it private.

<<functions>>=
void lua_superlu_push(lua_State* L, superlu_t matrix)
{
    lua_pushusertag(L, matrix, lua_superlu_tag);
}

superlu_t lua_superlu_get(lua_State* L, int index)
{
    if (index > lua_gettop(L))
        lua_error(L, "Index out of range");

    if (lua_tag(L,index) != lua_superlu_tag)
        lua_error(L, "Variable is not a SuperLU matrix");

    return lua_touserdata(L,index);
}

@ 


\subsection{Registration functions}

<<functions>>=
void lua_superlu_register(lua_State* L)
{
    lua_superlu_tag = lua_newtag(L);
#ifdef HAVE_SUPERLU
    lua_pushcclosure(L, lua_matrix_getmethod, 0);
    lua_settagmethod(L, lua_superlu_tag, "gettable");
#endif
}

@ 
