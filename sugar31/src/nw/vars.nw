
\section{Introduction}

The [[vars]] module manages variable global index assignment.


\section{Interface}

<<vars.h>>=
#ifndef VARS_H
#define VARS_H

struct mesh_struct;
typedef struct vars_mgr_struct* vars_mgr_t;

typedef struct vars_desc_t {
    const char*  name;
    int          offset;
    int          parent;
    char         type;
} vars_desc_t;

<<exported functions>>

#endif /* VARS_H */
@ 

The [[vars_create]] and [[vars_destroy]] construct and destroy
[[vars_mgr_t]] objects.

<<exported functions>>=
vars_mgr_t vars_create (struct mesh_struct* mesh);
void       vars_destroy(vars_mgr_t self);

@ 

The [[vars_add_vartype]] function adds a new type of nodal variable
(if it has not already been added) and returns its identifier.
The [[vars_vartype]] function looks up the identifier of a nodal
variable which has already been declared with [[vars_add_vartype]];
if the variable type has not been declared, [[vars_vartype]] returns
a negative value.

The [[vars_get_vartypes]] function runs through all the model functions
and queries them for the variable types that they wish to export.

<<exported functions>>=
int  vars_add_vartype (vars_mgr_t self, const char* name);
int  vars_vartype     (vars_mgr_t self, const char* name);
void vars_get_vartypes(vars_mgr_t self);

@ 

The [[vars_node]] and [[vars_branch]] functions add new nodal
and branch variables, respectively.  The arguments identify the
variables locally, and global identifiers are returned.

<<exported functions>>=
int vars_node  (vars_mgr_t self, int node_id, const char* name);
int vars_branch(vars_mgr_t self, const char* name);

@ 

The [[vars_assign]] function assigns global identifiers to all
the variables in a mesh.
Once the variables have been assigned, [[vars_count]] returns
the count of how many there were.

<<exported functions>>=
void vars_assign(vars_mgr_t self);
int  vars_count (vars_mgr_t self);

@ 

The [[vars_permute]] function applies a permutation to the
variables.  This permutation may be to improve the efficiency
of parallel solvers, or just to move the variables subject
to displacement boundary conditions to the end of the list.
The rule is $x_i \rightarrow x_{\pi(i)}$.

<<exported functions>>=
void vars_permute(vars_mgr_t self, int* pi);

@ 

The [[vars_lookup_node]] and [[vars_lookup_branch]] function
look up nodal and branch variables.  A negative return code
means that there is no such entry.

The [[vars_lookup]] function fills in a table of information
for each variable.

<<exported functions>>=
int vars_lookup_node  (vars_mgr_t self, int node_id, const char* name);
int vars_lookup_branch(vars_mgr_t self, int elt_id,  int var_number);
void vars_lookup(vars_mgr_t self, vars_desc_t* v);

@ 

\section{Implementation}

<<vars.c>>=
#include <sugar.h>

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include <mempool.h>
#include <dynarray.h>
#include <mesh.h>
#include <vars.h>

<<types>>
<<macros>>
<<static functions>>
<<functions>>
@ 

<<types>>=
struct vars_mgr_struct {
    <<[[vars_mgr_t]] entries>>
};

@ 

The [[var_types]] array is just a dynamic array of names for allowed
nodal variable types.  The identifier for a variable is given by its
index in the array.

<<[[vars_mgr_t]] entries>>=
dynarray_t var_types;
@ 

The variable table ([[node_vars]]) keeps track of the assignment of
global indices for nodal variables.  For each node there is a row of
integers, one for each variable type.  The $j$th entry of node $i$
is the global index of the $j$th variable type for node $i$.  When
the entry is zero, the variable has not been assigned an index yet.

The table [[branch_vars]] keeps track of the assignment of indices
to branch variables.  The $i$th entry (zero-based) is the $i$th
branch variable assigned from a call to [[var_branch]].
The [[branch_var_count]] variable tracks the total number of branch
variables.  The [[elt_branch_vars]] table stores the offset of the
first branch variable in [[branch_vars]] for each element.

The [[var_count]] field is the total number of variable identifiers that
have been assigned so far.

<<[[vars_mgr_t]] entries>>=
int* node_vars;
int* branch_vars;
int* elt_branch_vars;
int var_count;
int branch_var_count;
@ 

We also store a pointer to the mesh and a pointer to a local pool
for allocating the variable table and for storing the names of variable
types.

<<[[vars_mgr_t]] entries>>=
mesh_t mesh;
mempool_t pool;
@

The sizes of the pool and of the initial variable types array are
pretty ad-hoc.  I'm not sure how much difference an intelligent %'
choice would make.

<<functions>>=
vars_mgr_t vars_create(mesh_t mesh)
{
    mempool_t pool = mempool_create(MEMPOOL_DEFAULT_SPAN);
    vars_mgr_t self = (vars_mgr_t) mempool_cget(pool, sizeof(*self));

    self->pool = pool;
    self->var_types = dynarray_create(sizeof(const char*), 16);
    self->mesh = mesh;

    self->node_vars   = NULL;
    self->branch_vars = NULL;
    self->elt_branch_vars = NULL;

    return self;
}

@ 

<<functions>>=
void vars_destroy(vars_mgr_t self)
{
    dynarray_destroy(self->var_types);
    mempool_destroy(self->pool);
}

@ 


A variable type identifier is given by the index of its name
in the [[var_types]] array.  If we can't find a match, %'
we return $-1$.

<<functions>>=
int vars_vartype(vars_mgr_t self, const char* name)
{
    int i, n;

    n = dynarray_count(self->var_types);
    for (i = 0; i < n; ++i)
        if (strcmp(name, *(char**) dynarray_get(self->var_types, i)) == 0)
            return i;
    return -1;
}

@ 

<<functions>>=
int vars_add_vartype(vars_mgr_t self, const char* name)
{
    int var_id = vars_vartype(self, name);
    if (var_id < 0) {
        <<add new variable type>>
    }
    return var_id;
}

@ 

We need to make a copy of the name string when we add
a new variable type.

<<add new variable type>>=
name = mempool_strdup(self->pool, name);
dynarray_append(self->var_types, &name);
var_id = num_types(self)-1;
@ 

The [[num_types]] macro returns the number of variable types
declared so far.

<<static functions>>=
#define num_types(self) dynarray_count((self)->var_types)

@ 

If the current [[mode]] flag is set to [[REGISTER_VARS]],
the [[vars_node]] and [[vars_branch]] functions return zero
and record the names of the variables for this mesh.

<<macros>>=
#define ASSIGN_VARS 0
#define REGISTER_VARS 1

@ 

<<[[vars_mgr_t]] entries>>=
int mode;
@ 

Note that we explicitly use the fact that node indexing is one
based.  If we change to zero-based indexing for the node identifiers,
we need to make a corresponding change to this code.

The variable type identifiers are zero-based externally, but are
internally one-based so that we can use zero to represent
``unassigned.''

<<functions>>=
int vars_node(vars_mgr_t self, int node_id, const char* name)
{
    int var_type  = vars_vartype(self, name);
    int var_index = (node_id-1)*num_types(self) + var_type;

    if (self->mode == REGISTER_VARS) {
        vars_add_vartype(self, name);
        return 0;
    } else {
        <<check validity of variable type>>
        <<assign index if not already assigned>>
        return self->node_vars[var_index]-1;
    }
}

@ 

<<check validity of variable type>>=
if (var_type < 0)
    mesh_error(self->mesh, "Invalid nodal variable type");
@ 

<<assign index if not already assigned>>=
if (self->node_vars[var_index] == 0) 
    self->node_vars[var_index] = ++(self->var_count);
@ 

<<functions>>=
int vars_branch(vars_mgr_t self, const char* name)
{
    if (self->mode == REGISTER_VARS) {
        (self->branch_var_count)++;
        return 0;
    } else {
        if (self->branch_vars[self->branch_var_count] == 0) {
            return (self->branch_vars[(self->branch_var_count)++] = 
                    ++self->var_count)-1;
        } else {
            return self->branch_vars[(self->branch_var_count)++]-1;
        }
    }
}

@ 

The variable assignment routine does little work on its own.
All the real work is done by the model functions calling
[[vars_node]] and [[vars_branch]].

<<functions>>=
void vars_assign(vars_mgr_t self)
{
    int i, n;

    <<initialize variable assignment>>

    n = mesh_num_elements(self->mesh);
    for (i = 1; i <= n; ++i) {
        self->elt_branch_vars[i-1] = self->branch_var_count;
        element_vars( mesh_element(self->mesh, i), self );
    }
    self->elt_branch_vars[n] = self->branch_var_count;
}

@ 

<<initialize variable assignment>>=
if (self->node_vars)
     mempool_freeh(self->node_vars);

self->node_vars = 
(int*) mempool_cgeth(self->pool, num_types(self) * 
                     mesh_num_nodes(self->mesh) * sizeof(int));

self->branch_vars = 
(int*) mempool_cgeth(self->pool, self->branch_var_count * sizeof(int));

self->elt_branch_vars = 
(int*) mempool_cgeth(self->pool, (mesh_num_elements(self->mesh) + 1) * 
                     sizeof(int));

self->mode = ASSIGN_VARS;
self->var_count = 0;
self->branch_var_count = 0;

@ 

<<functions>>=
int vars_count(vars_mgr_t self)
{
    return self->var_count;
}

@ 

<<functions>>=
void vars_permute(vars_mgr_t self, int* pi)
{
    int ntypes = num_types(self);
    int nnodes = mesh_num_nodes(self->mesh);
    int i, n;

    for (i = 0; i < nnodes * ntypes; ++i) {
        if (self->node_vars[i] != 0)
            self->node_vars[i] = pi[self->node_vars[i]-1] + 1;
    }

    for (i = 0; i < self->branch_var_count; ++i) {
        if (self->branch_vars[i] != 0)
            self->branch_vars[i] = pi[self->branch_vars[i]-1] + 1;
    }

    self->mode = ASSIGN_VARS;
    self->branch_var_count = 0;
    n = mesh_num_elements(self->mesh);
    for (i = 1; i <= n; ++i) {
        element_vars( mesh_element(self->mesh, i), self );
    }
}

@ 

The [[vars_get_vartypes]] function is similar to [[vars_assign]],
but since it does not actually generate the variable assignments,
it does not need to keep the same internal arrays.

<<functions>>=
void vars_get_vartypes(vars_mgr_t self)
{
    int i, n;

    self->mode = REGISTER_VARS;
    self->branch_var_count = 0;

    self->branch_var_count = 0;
    n = mesh_num_elements(self->mesh);
    for (i = 1; i <= n; ++i) {
        element_vars( mesh_element(self->mesh, i), self );
    }
}

@ 

<<functions>>=
int vars_lookup_node(vars_mgr_t self, int node_id, const char* name)
{
    int var_type, var_index;

    assert(self->node_vars);
    if (node_id <= 0 || node_id > mesh_num_nodes(self->mesh) ||
        (var_type = vars_vartype(self, name)) < 0) {
        return -1;
    }

    var_index = (node_id-1)*num_types(self) + var_type;
    return self->node_vars[var_index]-1;
}

@ 

<<functions>>=
int vars_lookup_branch(vars_mgr_t self, int elt_id, int var_number)
{
    int var_index;

    assert(self->elt_branch_vars);
    if (elt_id <= 0 || elt_id > mesh_num_elements(self->mesh)) {
        return -1;
    }        

    var_index = self->elt_branch_vars[elt_id-1] + var_number-1;
    if (var_index >= self->elt_branch_vars[elt_id]) {
        return -1;
    }

    return self->branch_vars[var_index];
}

@ 

<<functions>>=
void vars_lookup(vars_mgr_t self, vars_desc_t* v)
{
    int nnodes    = mesh_num_nodes(self->mesh);
    int nelements = mesh_num_elements(self->mesh);
    int ntypes    = dynarray_count(self->var_types);
    int i, j;

    for (i = 0; i < nnodes; ++i) {
        for (j = 0; j < ntypes; ++j) {
            int vid = self->node_vars[i*ntypes + j]-1;
            if (vid >= 0) {
                v[vid].type   = 'n';
                v[vid].parent = i+1;
                v[vid].name   = *(char**) dynarray_get(self->var_types, j);
            }
        }
    }

    for (i = 0; i < nelements; ++i) {
        for (j=self->elt_branch_vars[i]; j < self->elt_branch_vars[i+1]; ++j) {
            int vid = self->branch_vars[j]-1;
            v[vid].type   = 'b';
            v[vid].parent = i+1;
            v[vid].offset = j - self->elt_branch_vars[i];
        }
    }
}

@ 
